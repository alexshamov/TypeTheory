
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = b'>\x99\xd3\xd9\x00\x95-\x8a\xb9\xeaP\xc0\xf8\xf2\xb1a'
    
_lr_action_items = {'comment':([0,2,3,12,15,16,17,19,20,22,26,34,38,39,41,46,47,48,49,50,51,],[1,-18,-20,-23,34,1,-23,-19,34,34,34,-14,-17,-16,-24,34,-15,-21,34,34,-22,]),'definition':([0,16,],[11,11,]),'context':([0,16,],[14,14,]),'rparen':([2,3,12,17,19,25,26,34,38,39,40,41,44,46,47,48,51,],[-18,-20,-23,-23,-19,40,41,-14,-17,-16,-13,-24,40,-12,-15,-21,-22,]),'name':([0,2,3,4,8,10,11,12,13,16,17,18,19,23,24,29,31,35,41,42,43,48,51,],[12,17,-20,12,12,12,27,-23,32,12,-23,12,-19,12,12,32,12,12,-24,12,12,-21,-22,]),'quit':([0,16,],[5,5,]),'evaluate':([0,16,],[8,8,]),'colonequal':([2,3,12,17,19,27,28,34,38,39,40,41,46,47,48,51,],[-18,-20,-23,-23,-19,42,43,-14,-17,-16,-13,-24,-12,-15,-21,-22,]),'arrow':([2,3,9,12,15,17,19,20,22,25,26,34,38,39,40,41,46,47,48,49,50,51,],[-18,-20,24,-23,35,-23,-19,35,35,24,35,-14,35,35,-13,-24,35,35,-21,35,35,-22,]),'lbracket':([7,12,17,],[21,30,30,]),'colon':([12,27,32,],[31,31,31,]),'lparen':([0,2,3,4,8,10,11,12,13,16,17,18,19,23,24,29,31,35,41,42,43,48,51,],[10,18,-20,10,10,10,29,-23,29,10,-23,10,-19,10,10,29,10,10,-24,10,10,-21,-22,]),'darrow':([2,3,9,12,17,19,25,34,38,39,40,41,46,47,48,51,],[-18,-20,23,-23,-23,-19,23,-14,-17,-16,-13,-24,-12,-15,-21,-22,]),'numeral':([21,30,],[37,45,]),'rbracket':([37,45,],[48,51,]),'parameter':([0,16,],[13,13,]),'type':([0,2,3,4,8,10,12,16,17,18,19,23,24,31,35,41,42,43,48,51,],[7,7,-20,7,7,7,-23,7,-23,7,-19,7,7,7,7,-24,7,7,-21,-22,]),'check':([0,16,],[4,4,]),'silently':([0,16,],[16,16,]),'$end':([0,1,2,3,5,6,12,14,15,16,17,19,20,22,33,34,36,38,39,40,41,46,47,48,49,50,51,],[-10,-9,-18,-20,-8,0,-23,-7,-6,-10,-23,-19,-4,-5,-1,-14,-11,-17,-16,-13,-24,-12,-15,-21,-2,-3,-22,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'application_expression':([0,4,8,10,16,18,23,24,31,35,42,43,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'binder':([0,4,8,10,11,13,16,18,23,24,29,31,35,42,43,],[9,9,9,25,28,33,9,9,9,9,44,9,9,9,9,]),'expression':([0,4,8,10,16,18,23,24,31,35,42,43,],[15,20,22,26,15,26,38,39,46,47,49,50,]),'simple_expression':([0,2,4,8,10,16,18,23,24,31,35,42,43,],[3,19,3,3,3,3,3,3,3,3,3,3,3,]),'statement':([0,16,],[6,36,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> parameter binder','statement',2,'p_statement_parameter','/home/root/dev/TypeTheory/parser.py',131),
  ('statement -> definition name colonequal expression','statement',4,'p_statement_definition','/home/root/dev/TypeTheory/parser.py',135),
  ('statement -> definition binder colonequal expression','statement',4,'p_statement_typeddefinition','/home/root/dev/TypeTheory/parser.py',139),
  ('statement -> check expression','statement',2,'p_statement_check','/home/root/dev/TypeTheory/parser.py',143),
  ('statement -> evaluate expression','statement',2,'p_statement_evaluate','/home/root/dev/TypeTheory/parser.py',147),
  ('statement -> expression','statement',1,'p_statement_expression','/home/root/dev/TypeTheory/parser.py',151),
  ('statement -> context','statement',1,'p_statement_context','/home/root/dev/TypeTheory/parser.py',155),
  ('statement -> quit','statement',1,'p_statement_quit','/home/root/dev/TypeTheory/parser.py',159),
  ('statement -> comment','statement',1,'p_statement_comment','/home/root/dev/TypeTheory/parser.py',163),
  ('statement -> <empty>','statement',0,'p_statement_empty','/home/root/dev/TypeTheory/parser.py',167),
  ('statement -> silently statement','statement',2,'p_statement_silently','/home/root/dev/TypeTheory/parser.py',171),
  ('binder -> name colon expression','binder',3,'p_binder','/home/root/dev/TypeTheory/parser.py',175),
  ('binder -> lparen binder rparen','binder',3,'p_binder_lparen','/home/root/dev/TypeTheory/parser.py',179),
  ('expression -> expression comment','expression',2,'p_expression_comment','/home/root/dev/TypeTheory/parser.py',183),
  ('expression -> expression arrow expression','expression',3,'p_expression_anonproduct','/home/root/dev/TypeTheory/parser.py',187),
  ('expression -> binder arrow expression','expression',3,'p_expression_product','/home/root/dev/TypeTheory/parser.py',191),
  ('expression -> binder darrow expression','expression',3,'p_expression_function','/home/root/dev/TypeTheory/parser.py',196),
  ('expression -> application_expression','expression',1,'p_expression_application_expression','/home/root/dev/TypeTheory/parser.py',203),
  ('application_expression -> application_expression simple_expression','application_expression',2,'p_application_expression_application','/home/root/dev/TypeTheory/parser.py',207),
  ('application_expression -> simple_expression','application_expression',1,'p_application_expression_simple_expression','/home/root/dev/TypeTheory/parser.py',211),
  ('simple_expression -> type lbracket numeral rbracket','simple_expression',4,'p_simple_expression_type','/home/root/dev/TypeTheory/parser.py',215),
  ('simple_expression -> name lbracket numeral rbracket','simple_expression',4,'p_simple_expression_qname','/home/root/dev/TypeTheory/parser.py',219),
  ('simple_expression -> name','simple_expression',1,'p_simple_expression_name','/home/root/dev/TypeTheory/parser.py',223),
  ('simple_expression -> lparen expression rparen','simple_expression',3,'p_simple_expression_paren','/home/root/dev/TypeTheory/parser.py',227),
]
